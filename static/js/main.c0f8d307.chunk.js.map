{"version":3,"sources":["logo.png","routes.tsx","Home.tsx","Devices.tsx","Settings.tsx","About.tsx","NotFound.tsx","Logo.tsx","Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","path","label","exact","icon","HomeIcon","component","divider","DeviceHubIcon","SettingsIcon","InfoIcon","useStyles","makeStyles","theme","createStyles","root","padding","spacing","logo","display","margin","text","textAlign","classes","className","alt","src","Typography","variant","noWrap","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","content","flexGrow","navListLink","textDecoration","navListItemText","color","CustomListItem","selected","onClick","Icon","to","ListItem","button","ListItemIcon","ListItemText","primary","children","useTheme","location","useLocation","useState","mobileOpen","setMobileOpen","handleDrawerToggle","headerTitle","currentRoute","routes","find","route","pathname","Logo","Divider","List","filter","map","key","matchPath","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","edge","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","basename","process","fallback","Layout","index","Boolean","window","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0f8d307.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.68206974.png\";","import HomeIcon from '@material-ui/icons/Home'\nimport DeviceHubIcon from '@material-ui/icons/DeviceHub'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport InfoIcon from '@material-ui/icons/Info'\n\nimport Home from './Home'\nimport Devices from './Devices'\nimport Settings from './Settings'\nimport About from './About'\nimport NotFound from './NotFound'\n\ninterface Route {\n  path: string,\n  component: any,\n  label?: string,\n  exact?: boolean,\n  divider?: boolean,\n  icon?: any,\n}\n\nexport default [\n  {\n    path: '/',\n    label: 'Home',\n    exact: true,\n    icon: HomeIcon,\n    component: Home,\n  },\n  {\n    path: '/devices',\n    label: 'Devices',\n    exact: true,\n    divider: true,\n    icon: DeviceHubIcon,\n    component: Devices,\n  },\n  {\n    path: '/settings',\n    label: 'Settings',\n    exact: true,\n    icon: SettingsIcon,\n    component: Settings,\n  },\n  {\n    path: '/about',\n    label: 'About',\n    exact: true,\n    icon: InfoIcon,\n    component: About,\n  },\n  {\n    path: '/*',\n    component: NotFound,\n  },\n] as Array<Route>\n","import React from 'react'\n\nexport default () => (\n  <>\n    home page\n  </>\n)\n","import React from 'react'\n\nexport default () => (\n  <>\n    devices page\n  </>\n)\n","import React from 'react'\n\nexport default () => (\n  <>\n    settings page\n  </>\n)\n","import React from 'react'\n\nexport default () => (\n  <>\n    about page\n  </>\n)\n","import React from 'react'\n\nexport default () => (\n  <>\n    not found page\n  </>\n)\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles'\n\nimport logo from './logo.png'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    padding: theme.spacing(3),\n  },\n  logo: {\n    display: 'block',\n    margin: 'auto',\n  },\n  text: {\n    textAlign: 'center',\n  },\n}))\n\nexport default () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <img alt=\"Pi Home\" className={classes.logo} src={logo} />\n      <Typography variant=\"h5\" className={classes.text} noWrap>\n        Pi Home\n      </Typography>\n    </div>\n  )\n}\n","import React, { ReactChild, useState } from 'react'\nimport { Link, useLocation, matchPath } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Divider from '@material-ui/core/Divider'\nimport Drawer from '@material-ui/core/Drawer'\nimport Hidden from '@material-ui/core/Hidden'\nimport IconButton from '@material-ui/core/IconButton'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles'\n\nimport routes from './routes'\nimport Logo from './Logo'\n\nconst drawerWidth = 240\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n    backgroundColor: '#282c34',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  navListLink: {\n    textDecoration: 'none',\n  },\n  navListItemText: {\n    color: '#000',\n  },\n}))\n\ninterface CustomListItemProps {\n  path: string,\n  icon: any\n  selected: boolean,\n  onClick: () => void,\n  label?: string,\n  divider?: boolean,\n}\n\nconst CustomListItem = ({ label, path, divider, selected, onClick, icon: Icon }: CustomListItemProps) => {\n  const classes = useStyles()\n\n  return (\n    <Link to={path} className={classes.navListLink} onClick={onClick}>\n      <ListItem divider={divider} selected={selected} button>\n        <ListItemIcon>\n          <Icon />\n        </ListItemIcon>\n        <ListItemText\n          classes={{\n            root: classes.navListItemText,\n          }}\n          primary={label}\n        />\n      </ListItem>\n    </Link>\n  )\n}\n\ninterface Props {\n  children: ReactChild\n}\n\nexport default ({ children }: Props) => {\n  const classes = useStyles()\n  const theme = useTheme()\n  const location = useLocation()\n  const [mobileOpen, setMobileOpen] = useState(false)\n\n  const handleDrawerToggle = () => setMobileOpen(!mobileOpen)\n\n  let headerTitle = 'Not Found'\n  const currentRoute = routes.find(route => route.path === location.pathname)\n  if (currentRoute && currentRoute.label) {\n    headerTitle = currentRoute.label\n  }\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar}>\n        <Logo />\n      </div>\n      <Divider />\n      <List>\n        {\n          routes.filter(route => route.label).map((route) => (\n            <CustomListItem\n              key={route.path}\n              label={route.label}\n              path={route.path}\n              icon={route.icon}\n              divider={route.divider}\n              selected={!!matchPath(location.pathname, { path: route.path, exact: route.exact })}\n              onClick={() => setMobileOpen(false)}\n            />\n          ))\n        }\n      </List>\n    </div>\n  )\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            {headerTitle}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {children}\n      </main>\n    </div>\n  )\n}\n","import React, { Suspense } from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport routes from './routes'\nimport Layout from './Layout'\n\nexport default () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Suspense fallback={<div>Loading...</div>}>\n      <Layout>\n        <Switch>\n          {routes.map((route, index) => (\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              component={route.component}\n            />\n          ))}\n        </Switch>\n      </Layout>\n    </Suspense>\n  </Router>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}