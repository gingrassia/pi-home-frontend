{"version":3,"sources":["components/snackbar/index.tsx","hooks/useLocalStorage.tsx","utils/socket/index.tsx","components/devices/index.tsx","pages/devices/list.tsx","components/inputs/text-field/index.tsx","components/devices/settings.tsx","pages/devices/add.tsx","components/devices/dependencies.tsx","pages/devices/edit.tsx","pages/devices/view.tsx","pages/not-found/index.tsx","components/server-settings/index.tsx","components/layout/logo.tsx","pages/welcome/index.tsx","routes.tsx","pages/home/index.tsx","pages/devices/index.tsx","pages/settings/index.tsx","pages/about/index.tsx","components/layout/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["message","severity","onClose","handleCloseNotification","event","reason","Snackbar","open","anchorOrigin","vertical","horizontal","autoHideDuration","action","IconButton","size","aria-label","color","onClick","fontSize","Alert","elevation","variant","useLocalStorage","key","initialValue","window","localStorage","setItem","setValue","value","getItem","socket","useStyles","makeStyles","theme","createStyles","root","flexGrow","card","textAlign","palette","text","secondary","cardActions","height","cardActionsRoot","padding","display","media","width","margin","actionItem","deviceLabel","grey","link","textDecoration","DeviceItem","device","classes","useState","status","deviceStatus","setDeviceStatus","serverBaseUrl","onButtonClick","statusToSet","a","fetch","method","headers","body","JSON","stringify","pin","res","json","icon","iconStyles","actions","type","fill","style","Button","className","toLowerCase","endsWith","Grid","item","lg","md","xs","Card","CardActionArea","to","CardContent","Typography","gutterBottom","component","label","CardActions","DeviceList","devices","container","spacing","map","devicesPath","setMessage","data","setData","error","setError","loading","setLoading","fetchData","useCallback","ok","useEffect","callback","uri","io","eventName","on","disconnect","CircularProgress","fab","top","right","bottom","left","position","Fab","errorIcon","props","TextField","fullWidth","helperText","InputProps","endAdornment","InputAdornment","title","marginBottom","wrapper","buttonSuccess","backgroundColor","green","buttonError","red","buttonProgress","deviceSchema","Yup","shape","required","history","useHistory","noWrap","initialValues","validationSchema","onSubmit","values","setSubmitting","setStatus","url","result","setTimeout","push","console","log","isSubmitting","availableTypes","errors","Object","keys","availablePins","buttonClassname","clsx","buttonContent","name","field","meta","FormControl","InputLabel","htmlFor","Select","inputProps","id","MenuItem","startCase","disabled","DependencyItem","dependency","dependencies","deviceId","useParams","Box","p","speedDial","speedDialOpen","setSpeedDialOpen","handleDeleteDevice","SpeedDial","ariaLabel","SpeedDialIcon","onOpen","SpeedDialAction","tooltipTitle","schema","test","URL","protocol","startsWith","setServerBaseUrl","logo","alt","src","process","disclamer","marginTop","path","exact","HomeIcon","sidebar","divider","DeviceHubIcon","useRouteMatch","List","Add","View","Edit","NotFoundPage","SettingsIcon","InfoIcon","drawer","breakpoints","up","flexShrink","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","content","navListLink","navListItemText","CustomListItem","selected","Icon","ListItem","button","ListItemIcon","ListItemText","primary","children","useTheme","location","useLocation","mobileOpen","setMobileOpen","handleDrawerToggle","headerTitle","currentRoute","routes","find","route","pathname","Divider","filter","matchPath","CssBaseline","AppBar","Toolbar","edge","Hidden","smUp","implementation","Drawer","anchor","direction","paper","ModalProps","keepMounted","xsDown","basename","fallback","index","Boolean","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8b10cf13.chunk.js","sourcesContent":["import React, { SyntheticEvent, Fragment } from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport Alert from '@material-ui/lab/Alert'\n\ninterface Props {\n  message?: string | null,\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined,\n  onClose?: () => void,\n}\n\nexport default ({ message, severity, onClose }: Props) => {\n  const handleCloseNotification = (event?: SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return\n    }\n\n    onClose && onClose()\n  }\n\n  return (\n    <>\n      {message &&\n        <Snackbar\n          open={true}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n          autoHideDuration={6000}\n          onClose={handleCloseNotification}\n          action={\n            <Fragment>\n              <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleCloseNotification}>\n                <CloseIcon fontSize=\"small\" />\n              </IconButton>\n            </Fragment>\n          }\n        >\n          <Alert onClose={handleCloseNotification} severity={severity} elevation={6} variant=\"filled\">\n            {message}\n          </Alert>\n        </Snackbar>\n      }\n    </>\n  )\n}\n","export default function useLocalStorage(key: string, initialValue: string | null = null) {\n  if (initialValue) {\n    window.localStorage.setItem(key, initialValue)\n  }\n\n  const setValue = (value: string) => {\n    window.localStorage.setItem(key, value)\n  }\n\n  return [window.localStorage.getItem(key) as string, setValue]\n}\n","import io from 'socket.io-client'\n\nlet socket: any | null\n\nexport const initiateSocket = (uri: string): void => {\n  socket = io(uri)\n}\n\nexport const disconnectSocket = (): void => {\n  if (socket) {\n    socket.disconnect()\n  }\n}\n\nexport const subscribeTo = (event: string, callback: (eventName: string, data: object) => void): void => {\n  if (socket) {\n    socket.on(event, (eventName: string | object, data?: object) => {\n      if (data) {\n        callback(eventName as string, data)\n      } else {\n        callback(event, eventName as object)\n      }\n    })\n  }\n}\n\nexport const sendData = (eventName: string, data: object): void => {\n  if (socket) {\n    socket.emit(eventName, data)\n  }\n}\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport grey from '@material-ui/core/colors/grey'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport ToggleOnIcon from '@material-ui/icons/ToggleOn'\nimport ToggleOffIcon from '@material-ui/icons/ToggleOff'\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects'\n\nimport Snackbar from '../snackbar'\nimport useLocalStorage from '../../hooks/useLocalStorage'\nimport { initiateSocket, disconnectSocket, subscribeTo } from '../../utils/socket'\n\ninterface Device {\n  pin: number\n  label: string\n  type: string\n  status?: number\n}\n\ninterface Props {\n  devicesPath: string\n}\n\ninterface DeviceListProps {\n  devices: Device[] | null\n}\n\ninterface DeviceItemProps {\n  device: Device\n}\n\ninterface MessageData {\n  pin?: number\n  status?: boolean\n}\n\ninterface Message {\n  eventName: string\n  data: MessageData\n}\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    flexGrow: 1,\n  },\n  card: {\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  cardActions: {\n    height: 50,\n  },\n  cardActionsRoot: {\n    padding: 8,\n    display: 'inline-flex',\n  },\n  media: {\n    height: 140,\n    width: 140,\n    display: 'block',\n    margin: 'auto',\n  },\n  actionItem: {\n    display: 'inline-block',\n  },\n  deviceLabel: {\n    color: grey[700],\n  },\n  link: {\n    textDecoration: 'none',\n    color: grey[500],\n  },\n}))\n\nconst DeviceItem = ({ device }: DeviceItemProps) => {\n  const classes = useStyles()\n  const [deviceStatus, setDeviceStatus] = useState(device.status)\n  const [serverBaseUrl] = useLocalStorage('serverBaseUrl')\n\n  // force re-render\n  if (deviceStatus !== device.status) {\n    setDeviceStatus(device.status)\n  }\n\n  const onButtonClick = async (statusToSet: number) => {\n    if (deviceStatus === statusToSet) {\n      const res = await fetch(`${serverBaseUrl}/api/devices/change-status`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          'pin': device.pin,\n        }),\n      })\n      const { status } = await res.json()\n      setDeviceStatus(status)\n    }\n  }\n\n  let icon = null\n  let iconStyles = { fontSize: 125 }\n  let actions = null\n  if (device.type === 'led') {\n    if (deviceStatus) {\n      // @ts-ignore TS2322\n      iconStyles = { ...iconStyles, fill: '#ffc300' }\n    }\n    icon = <EmojiObjectsIcon style={iconStyles} />\n    actions = (\n      <>\n        <Button size=\"small\" color=\"primary\" className={classes.actionItem} onClick={() => onButtonClick(deviceStatus || 0)}>\n          {deviceStatus ? 'Turn Off' : 'Turn On'}\n        </Button>\n      </>\n    )\n  } else if (device.type.toLowerCase().endsWith('button')) {\n    if (deviceStatus) {\n      icon = <ToggleOnIcon style={{ ...iconStyles, fill: '#ffc300' }} />\n    } else {\n      icon = <ToggleOffIcon style={iconStyles} />\n    }\n  }\n\n  return (\n    <Grid item lg={3} md={4} xs={6}>\n      <Card className={classes.card}>\n        <CardActionArea>\n          <Link to={`/devices/view/${device.pin}`} className={classes.link}>\n            <>\n              {icon}\n              <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\" className={classes.deviceLabel}>\n                  {device.label}\n                </Typography>\n              </CardContent>\n            </>\n          </Link>\n        </CardActionArea>\n        <CardActions className={classes.cardActions} classes={{ root: classes.cardActionsRoot }}>\n          {actions}\n        </CardActions>\n      </Card>\n    </Grid>\n  )\n}\n\nconst DeviceList = ({ devices }: DeviceListProps) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        {devices && devices.map(device => <DeviceItem key={device.pin} device={device} />)}\n      </Grid>\n    </div>\n  )\n}\n\nexport default ({ devicesPath }: Props) => {\n  const [serverBaseUrl] = useLocalStorage('serverBaseUrl')\n  const [message, setMessage] = useState<Message | null>(null)\n  const [data, setData] = useState<Device[] | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n\n  const fetchData = useCallback(async () => {\n    setMessage(null)\n    setLoading(true)\n\n    const data = await fetch(`${serverBaseUrl}${devicesPath}`)\n\n    if (data.ok) {\n      setData(await data.json())\n    } else {\n      setError(await data.text())\n    }\n\n    setLoading(false)\n  }, [serverBaseUrl, devicesPath])\n\n  useEffect(() => {\n    fetchData()\n\n    if (serverBaseUrl) {\n      initiateSocket(`${serverBaseUrl}`)\n\n      subscribeTo('all', (eventName: string, data: object) => setMessage({ eventName, data }))\n    }\n\n    return () => {\n      disconnectSocket()\n    }\n  }, [fetchData, serverBaseUrl])\n\n  if (message && data) {\n    switch (message.eventName) {\n    case 'deviceStatusChanged':\n      const devices = data.map((device) => {\n        if (device.pin === message.data.pin) {\n          return {\n            ...device,\n            status: message.data.status,\n          } as Device\n        }\n        return device\n      }) as Device[]\n\n      setData(devices)\n      setMessage(null)\n      break\n    default:\n      break\n    }\n  }\n\n  return (\n    <>\n      <Snackbar message={error} severity=\"error\" onClose={() => setError(null)}/>\n      {!error ? loading ? <CircularProgress /> : <DeviceList devices={data} /> : null}\n    </>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\nimport Fab from '@material-ui/core/Fab'\nimport AddIcon from '@material-ui/icons/Add'\n\nimport Devices from '../../components/devices'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  fab: {\n    top: 'auto',\n    right: theme.spacing(2),\n    bottom: theme.spacing(2),\n    left: 'auto',\n    position: 'fixed',\n  },\n}))\n\nexport default () => {\n  const classes = useStyles()\n\n  return (\n    <>\n      <Devices devicesPath=\"/api/devices\" />\n      <Link to=\"/devices/add\">\n        <Fab color=\"primary\" aria-label=\"add\" className={classes.fab}>\n          <AddIcon />\n        </Fab>\n      </Link>\n    </>\n  )\n}\n","import React from 'react'\nimport TextField, { TextFieldProps } from '@material-ui/core/TextField'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport ErrorIcon from '@material-ui/icons/ReportProblem'\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\n\ninterface CustomInputProps extends Omit<TextFieldProps, 'error' | 'name'> {\n  name: string\n  error?: any\n}\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  errorIcon: {\n    color: '#ff1818',\n  },\n}))\n\nexport default ({ error, ...props }: CustomInputProps) => {\n  const classes = useStyles()\n\n  return (\n    <TextField\n      {...props}\n      fullWidth\n      variant=\"outlined\"\n      margin=\"dense\"\n      error={!!error}\n      helperText={error}\n      InputProps={{\n        endAdornment: error && (\n          <InputAdornment position=\"end\">\n            <ErrorIcon className={classes.errorIcon}/>\n          </InputAdornment>\n        ),\n      }}\n    />\n  )\n}\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport CheckIcon from '@material-ui/icons/Check'\nimport CancelIcon from '@material-ui/icons/Cancel'\nimport { Form, FormikProps, Formik, Field, FieldProps } from 'formik'\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles'\nimport { green, red } from '@material-ui/core/colors'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport clsx from 'clsx'\nimport * as Yup from 'yup'\nimport { startCase } from 'lodash'\n\nimport TextField from '../inputs/text-field'\nimport useLocalStorage from '../../hooks/useLocalStorage'\nimport Snackbar from '../snackbar'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  title: {\n    marginBottom: theme.spacing(1),\n  },\n  wrapper: {\n    margin: theme.spacing(1),\n    position: 'relative',\n  },\n  buttonSuccess: {\n    backgroundColor: green[500],\n    '&:hover': {\n      backgroundColor: green[700],\n    },\n  },\n  buttonError: {\n    backgroundColor: red[500],\n    '&:hover': {\n      backgroundColor: red[700],\n    },\n  },\n  buttonProgress: {\n    color: green[500],\n  },\n}))\n\nconst deviceSchema = Yup.object().shape({\n  pin: Yup.number().required('Required'),\n  label: Yup.string().required('Required'),\n  type: Yup.string().required('Required'),\n})\n\ninterface Values {\n  pin?: number\n  label: string\n  type: string\n}\n\ninterface Device {\n  pin: number\n  label: string\n  type: string\n  status?: number\n}\n\ninterface Props {\n  device?: Device | null\n}\n\ninterface AvailableDevices {\n  [key: string]: number[]\n}\n\nexport default ({ device }: Props) => {\n  const classes = useStyles()\n  const history = useHistory()\n  const [serverBaseUrl] = useLocalStorage('serverBaseUrl')\n  const [data, setData] = useState<AvailableDevices | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n\n  const fetchData = useCallback(async () => {\n    setLoading(true)\n\n    const data = await fetch(`${serverBaseUrl}/api/devices/available`)\n\n    if (data.ok) {\n      setData(await data.json())\n    } else {\n      setError(await data.text())\n    }\n\n    setLoading(false)\n  }, [serverBaseUrl])\n\n  useEffect(() => {\n    fetchData()\n  }, [fetchData])\n\n  return (\n    <>\n      <Snackbar message={error} severity=\"error\" onClose={() => setError(null)}/>\n      {!error ? loading ? <CircularProgress /> : (\n        <>\n          <Typography variant=\"h5\" className={classes.title} noWrap>\n            Device Settings\n          </Typography>\n\n          <Formik\n            initialValues={{\n              pin: device?.pin,\n              label: device?.label || '',\n              type: device?.type || '',\n            }}\n            validationSchema={deviceSchema}\n            onSubmit={async (values, { setSubmitting, setStatus }) => {\n              const url = device ? `${serverBaseUrl}/api/devices/${device.pin}` : `${serverBaseUrl}/api/devices/`\n              const method = device ? 'PUT' : 'POST'\n              const result = await fetch(url, {\n                method,\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(values),\n              })\n\n              if (result.ok) {\n                const { pin }: Device = await result.json()\n                setStatus('success')\n                setTimeout(() => {\n                  history.push(`/devices/view/${pin}`)\n                }, 750)\n              } else {\n                // TODO: handle error\n                // eslint-disable-next-line no-console\n                console.log(await result.text())\n                setStatus('error')\n              }\n\n              setSubmitting(false)\n            }}\n          >\n            {({ isSubmitting, status, values, errors, initialValues }: FormikProps<Values>) => {\n              const availableTypes = Object.keys(data || {})\n              let availablePins: number[] = []\n              if (values?.type && data) {\n                availablePins = data[values.type] || []\n              }\n\n              const buttonClassname = clsx({\n                [classes.buttonSuccess]: status === 'success',\n                [classes.buttonError]: status === 'error',\n              })\n\n              let buttonContent: any = 'Save'\n              if (isSubmitting) {\n                buttonContent = <CircularProgress size={24} className={classes.buttonProgress} />\n              } else if (status === 'success') {\n                buttonContent = <CheckIcon />\n              } else if (status === 'error') {\n                buttonContent = <CancelIcon />\n              }\n\n              return (\n                <Form>\n                  {!device && <Field name=\"type\">\n                    {({ field, meta: { error } }: FieldProps) => (\n                      <FormControl\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        fullWidth\n                        required\n                      >\n                        <InputLabel htmlFor=\"type\">Type</InputLabel>\n                        <Select\n                          label={'Type'}\n                          {...field}\n                          inputProps={{\n                            id: 'type',\n                          }}\n                        >\n                          {availableTypes.map(item => <MenuItem key={item} value={item}>{startCase(item)}</MenuItem>)}\n                        </Select>\n                      </FormControl>\n                    )}\n                  </Field>}\n                  {!device && <Field name=\"pin\">\n                    {({ field, meta: { error } }: FieldProps) => (\n                      <FormControl\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        fullWidth\n                        required\n                      >\n                        <InputLabel htmlFor=\"pin\">Pin</InputLabel>\n                        <Select\n                          label={'Pin'}\n                          {...field}\n                          inputProps={{\n                            id: 'pin',\n                          }}\n                        >\n                          {availablePins.map(item => <MenuItem key={item} value={item}>{item}</MenuItem>)}\n                        </Select>\n                      </FormControl>\n                    )}\n                  </Field>}\n                  <Field name=\"label\">\n                    {({ field, meta: { error } }: FieldProps) => (\n                      <TextField\n                        label={'Label'}\n                        error={error}\n                        {...field}\n                        required\n                      />\n                    )}\n                  </Field>\n\n                  <div className={classes.wrapper}>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      type=\"submit\"\n                      className={buttonClassname}\n                      disabled={isSubmitting}\n                    >\n                      {buttonContent}\n                    </Button>\n                  </div>\n                </Form>\n              )\n            }}\n          </Formik>\n        </>\n      ) : null}\n    </>\n  )\n}\n","import React from 'react'\n\nimport DeviceSettings from '../../components/devices/settings'\n\nexport default () => {\n  return (\n    <>\n      <DeviceSettings />\n    </>\n  )\n}\n","import React, { useEffect, useCallback, useState } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles'\nimport { green, red } from '@material-ui/core/colors'\n\nimport useLocalStorage from '../../hooks/useLocalStorage'\nimport Snackbar from '../snackbar'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  title: {\n    marginBottom: theme.spacing(1),\n  },\n  wrapper: {\n    margin: theme.spacing(1),\n    position: 'relative',\n  },\n  buttonSuccess: {\n    backgroundColor: green[500],\n    '&:hover': {\n      backgroundColor: green[700],\n    },\n  },\n  buttonError: {\n    backgroundColor: red[500],\n    '&:hover': {\n      backgroundColor: red[700],\n    },\n  },\n  buttonProgress: {\n    color: green[500],\n  },\n}))\n\ninterface Values {\n  pin?: number\n  label: string\n  type: string\n}\n\ninterface InnerDevice {\n  pin: number\n  label: string\n  type: string\n}\n\ninterface Device {\n  pin: number\n  label: string\n  type: string\n  dependencies: InnerDevice[]\n  status?: number\n}\n\ninterface Props {\n  device?: Device | null\n}\n\ninterface DependencyItemProps {\n  dependency: InnerDevice\n}\n\nconst DependencyItem = ({ dependency }: DependencyItemProps) => {\n  return (\n    <>\n      {dependency?.label}\n    </>\n  )\n}\n\nexport default ({ device }: Props) => {\n  const classes = useStyles()\n  const [serverBaseUrl] = useLocalStorage('serverBaseUrl')\n  const [data, setData] = useState<Device[] | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n\n  const fetchData = useCallback(async () => {\n    setLoading(true)\n\n    const url = device?.type === 'led' ? `${serverBaseUrl}/api/devices?type=button` : `${serverBaseUrl}/api/devices?type=led`\n    const data = await fetch(url)\n\n    if (data.ok) {\n      setData(await data.json())\n    } else {\n      setError(await data.text())\n    }\n\n    setLoading(false)\n  }, [serverBaseUrl, device])\n\n  useEffect(() => {\n    fetchData()\n  }, [fetchData])\n\n  return (\n    <>\n      <Snackbar message={error} severity=\"error\" onClose={() => setError(null)}/>\n      {!error ? loading ? <CircularProgress /> : data ? (\n        <>\n          <Typography variant=\"h5\" className={classes.title} noWrap>\n            Device Dependencies\n          </Typography>\n\n          {device?.dependencies && device?.dependencies.map(dependency => <DependencyItem key={dependency.pin} dependency={dependency} />)}\n        </>\n      ) : null : null}\n    </>\n  )\n}\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Box from '@material-ui/core/Box'\n\nimport useLocalStorage from '../../hooks/useLocalStorage'\nimport Snackbar from '../../components/snackbar'\nimport DeviceSettings from '../../components/devices/settings'\nimport DeviceDependencies from '../../components/devices/dependencies'\n\ninterface InnerDevice {\n  pin: number\n  label: string\n  type: string\n}\n\ninterface Device {\n  pin: number\n  label: string\n  type: string\n  dependencies: InnerDevice[]\n  status?: number\n}\n\nexport default () => {\n  const { deviceId } = useParams()\n  const [serverBaseUrl] = useLocalStorage('serverBaseUrl')\n  const [data, setData] = useState<Device | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n\n  const fetchData = useCallback(async () => {\n    setLoading(true)\n\n    const data = await fetch(`${serverBaseUrl}/api/devices/${deviceId}`)\n\n    if (data.ok) {\n      setData(await data.json())\n    } else {\n      setError(await data.text())\n    }\n\n    setLoading(false)\n  }, [serverBaseUrl, deviceId])\n\n  useEffect(() => {\n    fetchData()\n  }, [fetchData])\n\n  return (\n    <>\n      <Snackbar message={error} severity=\"error\" onClose={() => setError(null)}/>\n      {!error ? loading ? <CircularProgress /> : data ? (\n        <>\n          <DeviceSettings device={data} />\n          <Box p={2} />\n          <DeviceDependencies device={data} />\n        </>\n      ) : null : null}\n    </>\n  )\n}\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\nimport EditIcon from '@material-ui/icons/Edit'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport SpeedDial from '@material-ui/lab/SpeedDial'\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon'\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction'\n\nimport useLocalStorage from '../../hooks/useLocalStorage'\nimport Snackbar from '../../components/snackbar'\n\ninterface Device {\n  pin: number\n  label: string\n  type: string\n  status?: number\n}\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  speedDial: {\n    top: 'auto',\n    right: theme.spacing(2),\n    bottom: theme.spacing(2),\n    left: 'auto',\n    position: 'fixed',\n  },\n}))\n\nexport default () => {\n  const classes = useStyles()\n  const history = useHistory()\n  const { deviceId } = useParams()\n  const [serverBaseUrl] = useLocalStorage('serverBaseUrl')\n  const [data, setData] = useState<Device | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [speedDialOpen, setSpeedDialOpen] = useState(false)\n\n  const fetchData = useCallback(async () => {\n    setLoading(true)\n\n    const data = await fetch(`${serverBaseUrl}/api/devices/${deviceId}`)\n\n    if (data.ok) {\n      setData(await data.json())\n    } else {\n      setError(await data.text())\n    }\n\n    setLoading(false)\n  }, [serverBaseUrl, deviceId])\n\n  useEffect(() => {\n    fetchData()\n  }, [fetchData])\n\n  const handleDeleteDevice = async () => {\n    setSpeedDialOpen(false)\n    // TODO: display dialog\n    // @ts-ignore TS7022\n    const result = await fetch(`${serverBaseUrl}/api/devices/${data?.pin}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n\n    if (result.ok) {\n      setTimeout(() => {\n        history.push('/devices')\n      }, 750)\n    } else {\n      setError(await result.text())\n    }\n  }\n\n  return (\n    <>\n      <Snackbar message={error} severity=\"error\" onClose={() => setError(null)}/>\n      {!error ? loading ? <CircularProgress /> : data ? (\n        <>\n          view device {data?.pin}\n          <SpeedDial\n            ariaLabel=\"Actions\"\n            className={classes.speedDial}\n            icon={<SpeedDialIcon />}\n            onClose={() => setSpeedDialOpen(false)}\n            onOpen={() => setSpeedDialOpen(true)}\n            open={speedDialOpen}\n          >\n            <SpeedDialAction\n              key={'edit'}\n              icon={<EditIcon />}\n              tooltipTitle={'Edit'}\n              onClick={() => history.push(`/devices/edit/${deviceId}`)}\n            />\n            <SpeedDialAction\n              key={'delete'}\n              icon={<DeleteIcon />}\n              tooltipTitle={'Delete'}\n              onClick={handleDeleteDevice}\n            />\n          </SpeedDial>\n        </>\n      ) : null : null}\n    </>\n  )\n}\n","import React from 'react'\n\nexport default () => (\n  <>\n    not found page\n  </>\n)\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport CheckIcon from '@material-ui/icons/Check'\nimport CancelIcon from '@material-ui/icons/Cancel'\nimport { Form, FormikProps, Formik, Field, FieldProps } from 'formik'\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles'\nimport { green, red } from '@material-ui/core/colors'\nimport clsx from 'clsx'\nimport * as Yup from 'yup'\n\nimport TextField from '../inputs/text-field'\nimport useLocalStorage from '../../hooks/useLocalStorage'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  title: {\n    marginBottom: theme.spacing(1),\n  },\n  wrapper: {\n    margin: theme.spacing(1),\n    position: 'relative',\n  },\n  buttonSuccess: {\n    backgroundColor: green[500],\n    '&:hover': {\n      backgroundColor: green[700],\n    },\n  },\n  buttonError: {\n    backgroundColor: red[500],\n    '&:hover': {\n      backgroundColor: red[700],\n    },\n  },\n  buttonProgress: {\n    color: green[500],\n  },\n}))\n\nconst schema = Yup.object().shape({\n  serverBaseUrl: Yup.string().test({\n    name: 'serverBaseUrl',\n    // eslint-disable-next-line no-template-curly-in-string\n    message: '${path} must be a valid URL',\n    test: (value) => {\n      try {\n        if (value) {\n          return new URL(value).protocol.startsWith('http')\n        }\n      } catch (error) {\n        // do nothing\n      }\n      return false\n    },\n  }).required('Required'),\n})\n\ninterface Values {\n  serverBaseUrl: string\n}\n\nexport default () => {\n  const classes = useStyles()\n  const [serverBaseUrl, setServerBaseUrl] = useLocalStorage('serverBaseUrl')\n\n  return (\n    <>\n      <Typography variant=\"h5\" className={classes.title} noWrap>\n        Server Settings\n      </Typography>\n\n      <Formik\n        initialValues={{\n          serverBaseUrl: serverBaseUrl as string || '',\n        }}\n        validationSchema={schema}\n        onSubmit={(values, { setSubmitting, setStatus }) => {\n          // async simulation\n          setTimeout(() => {\n            try {\n              setStatus('success')\n              // @ts-ignore TS2349\n              setServerBaseUrl(values.serverBaseUrl)\n            } catch (error) {\n              setStatus('error')\n            }\n            setSubmitting(false)\n          }, 500)\n        }}\n      >\n        {({ isSubmitting, status }: FormikProps<Values>) => {\n          const buttonClassname = clsx({\n            [classes.buttonSuccess]: status === 'success',\n            [classes.buttonError]: status === 'error',\n          })\n\n          let buttonContent: any = 'Save'\n          if (isSubmitting) {\n            buttonContent = <CircularProgress size={24} className={classes.buttonProgress} />\n          } else if (status === 'success') {\n            buttonContent = <CheckIcon />\n          } else if (status === 'error') {\n            buttonContent = <CancelIcon />\n          }\n\n          return(\n            <Form>\n              <Field name=\"serverBaseUrl\">\n                {({ field, meta: { error } }: FieldProps) => (\n                  <TextField\n                    label={'Server Base Url'}\n                    error={error}\n                    {...field}\n                    required\n                  />\n                )}\n              </Field>\n\n              <div className={classes.wrapper}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  type=\"submit\"\n                  className={buttonClassname}\n                  disabled={isSubmitting}\n                >\n                  {buttonContent}\n                </Button>\n              </div>\n            </Form>\n          )\n        }}\n      </Formik>\n    </>\n  )\n}\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    padding: theme.spacing(3),\n  },\n  logo: {\n    display: 'block',\n    margin: 'auto',\n  },\n  text: {\n    textAlign: 'center',\n    color: 'black',\n  },\n}))\n\nexport default () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <img alt=\"Pi Home\" className={classes.logo} src={`${process.env.PUBLIC_URL}/images/icons/icon-96x96.png`} />\n      <Typography variant=\"h5\" className={classes.text} noWrap>\n        Pi Home\n      </Typography>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport Logo from '../../components/layout/logo'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  link: {\n    textDecoration: 'none',\n  },\n  text: {\n    textAlign: 'center',\n    color: 'black',\n  },\n  disclamer: {\n    marginTop: 50,\n  },\n}))\n\nexport default () => {\n  const classes = useStyles()\n\n  return (\n    <>\n      <Logo />\n\n      <Typography variant=\"h3\" className={classes.text} noWrap>\n        Welcome!\n      </Typography>\n\n      <div className={classes.disclamer}>\n        <Typography component=\"h6\">\n          In order to get started, you need to configure the app to connect it with your server\n        </Typography>\n\n        <Link to={'/settings'} className={classes.link}>\n          <Button variant=\"outlined\" color=\"primary\">\n            Go To Settings\n          </Button>\n        </Link>\n      </div>\n    </>\n  )\n}\n","import HomeIcon from '@material-ui/icons/Home'\nimport DeviceHubIcon from '@material-ui/icons/DeviceHub'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport InfoIcon from '@material-ui/icons/Info'\n\nimport HomePage from './pages/home'\nimport DevicesPage from './pages/devices'\nimport SettingsPage from './pages/settings'\nimport AboutPage from './pages/about'\nimport WelcomePage from './pages/welcome'\nimport NotFoundPage from './pages/not-found'\n\ninterface Route {\n  path: string,\n  component: any,\n  label?: string,\n  exact?: boolean,\n  sidebar?: boolean,\n  divider?: boolean,\n  icon?: any,\n}\n\nexport default [\n  {\n    path: '/',\n    label: 'Home',\n    exact: true,\n    icon: HomeIcon,\n    component: HomePage,\n    sidebar: true,\n  },\n  {\n    path: '/devices',\n    label: 'Devices',\n    divider: true,\n    icon: DeviceHubIcon,\n    component: DevicesPage,\n    sidebar: true,\n  },\n  {\n    path: '/settings',\n    label: 'Settings',\n    exact: true,\n    icon: SettingsIcon,\n    component: SettingsPage,\n    sidebar: true,\n  },\n  {\n    path: '/about',\n    label: 'About',\n    exact: true,\n    icon: InfoIcon,\n    component: AboutPage,\n    sidebar: true,\n  },\n  {\n    path: '/welcome',\n    label: 'Welcome',\n    exact: true,\n    component: WelcomePage,\n  },\n  {\n    path: '/*',\n    component: NotFoundPage,\n  },\n] as Route[]\n","import React from 'react'\n\nimport Devices from '../../components/devices'\n\nexport default () => {\n  return (\n    <>\n      <Devices devicesPath=\"/api/devices?type=led\" />\n    </>\n  )\n}\n","import React from 'react'\nimport { Route, Redirect, Switch, useRouteMatch } from 'react-router-dom'\n\nimport List from './list'\nimport Add from './add'\nimport Edit from './edit'\nimport View from './view'\nimport useLocalStorage from '../../hooks/useLocalStorage'\nimport NotFoundPage from '../not-found'\n\nexport default () => {\n  const { path } = useRouteMatch()\n  const [serverBaseUrl] = useLocalStorage('serverBaseUrl')\n\n  if (!serverBaseUrl) {\n    return <Redirect to={'/welcome'} />\n  }\n\n  return (\n    <>\n      <Switch>\n        <Route exact path={path} component={List} />\n        <Route exact path={`${path}/add`} component={Add} />\n        <Route exact path={`${path}/view/:deviceId(\\\\d+)`} component={View} />\n        <Route exact path={`${path}/edit/:deviceId(\\\\d+)`} component={Edit} />\n        <Route path={`${path}/*`} component={NotFoundPage} />\n      </Switch>\n    </>\n  )\n}\n","import React from 'react'\n\nimport ServerSettings from '../../components/server-settings'\n\nexport default () => {\n  return (\n    <>\n      <ServerSettings />\n    </>\n  )\n}\n","import React from 'react'\n\nexport default () => {\n  return (\n    <>\n      about page\n    </>\n  )\n}\n","import React, { ReactChild, useState } from 'react'\nimport { Link, useLocation, matchPath } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Divider from '@material-ui/core/Divider'\nimport Drawer from '@material-ui/core/Drawer'\nimport Hidden from '@material-ui/core/Hidden'\nimport IconButton from '@material-ui/core/IconButton'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport { Theme, makeStyles, useTheme, createStyles } from '@material-ui/core/styles'\n\nimport routes from '../../routes'\nimport Logo from './logo'\n\nconst drawerWidth = 240\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n    backgroundColor: '#282c34',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  navListLink: {\n    textDecoration: 'none',\n  },\n  navListItemText: {\n    color: '#000',\n  },\n}))\n\ninterface CustomListItemProps {\n  path: string,\n  icon: any\n  selected: boolean,\n  onClick: () => void,\n  label?: string,\n  divider?: boolean,\n}\n\nconst CustomListItem = ({ label, path, divider, selected, onClick, icon: Icon }: CustomListItemProps) => {\n  const classes = useStyles()\n\n  return (\n    <Link to={path} className={classes.navListLink} onClick={onClick}>\n      <ListItem divider={divider} selected={selected} button>\n        <ListItemIcon>\n          <Icon />\n        </ListItemIcon>\n        <ListItemText\n          classes={{\n            root: classes.navListItemText,\n          }}\n          primary={label}\n        />\n      </ListItem>\n    </Link>\n  )\n}\n\ninterface Props {\n  children: ReactChild\n}\n\nexport default ({ children }: Props) => {\n  const classes = useStyles()\n  const theme = useTheme()\n  const location = useLocation()\n  const [mobileOpen, setMobileOpen] = useState(false)\n\n  const handleDrawerToggle = () => setMobileOpen(!mobileOpen)\n\n  let headerTitle = 'Not Found'\n  const currentRoute = routes.find(route => {\n    if (route.path !== '/' && route.path !== '/*') {\n      return location.pathname.startsWith(route.path)\n    }\n\n    return route.path === location.pathname\n  })\n  if (currentRoute && currentRoute.label) {\n    headerTitle = currentRoute.label\n  }\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar}>\n        <Link to={'/'} className={classes.navListLink} onClick={() => setMobileOpen(false)}>\n          <Logo />\n        </Link>\n      </div>\n      <Divider />\n      <List>\n        {\n          routes.filter(route => route.sidebar).map((route) => (\n            <CustomListItem\n              key={route.path}\n              label={route.label}\n              path={route.path}\n              icon={route.icon}\n              divider={route.divider}\n              selected={!!matchPath(location.pathname, { path: route.path, exact: route.exact })}\n              onClick={() => setMobileOpen(false)}\n            />\n          ))\n        }\n      </List>\n    </div>\n  )\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            {headerTitle}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {children}\n      </main>\n    </div>\n  )\n}\n","import React, { Suspense } from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport routes from './routes'\nimport Layout from './components/layout'\n\nexport default () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Suspense fallback={<div>Loading...</div>}>\n      <Layout>\n        <Switch>\n          {routes.map((route, index) => (\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              component={route.component}\n            />\n          ))}\n        </Switch>\n      </Layout>\n    </Suspense>\n  </Router>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}