{"version":3,"sources":["hooks/useLocalStorage.tsx","hooks/useFetch.tsx","components/devices/index.tsx","pages/devices/list.tsx","pages/devices/add.tsx","pages/devices/edit.tsx","pages/not-found/index.tsx","components/inputs/text-field/index.tsx","components/server-settings/index.tsx","components/layout/logo.tsx","pages/welcome/index.tsx","routes.tsx","pages/home/index.tsx","pages/devices/index.tsx","pages/settings/index.tsx","pages/about/index.tsx","components/layout/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useLocalStorage","key","initialValue","window","localStorage","setItem","setValue","value","getItem","useFetch","url","serverBaseUrl","useState","data","setData","error","setError","loading","setLoading","useEffect","a","fetch","res","json","fetchData","useStyles","makeStyles","theme","createStyles","root","flexGrow","card","textAlign","color","palette","text","secondary","cardActions","height","media","width","display","margin","bullet","transform","Device","device","classes","icon","iconStyles","fontSize","actions","type","status","fill","style","Button","size","Typography","variant","component","className","toLowerCase","endsWith","Grid","item","lg","md","xs","Card","CardActionArea","CardContent","gutterBottom","label","CardActions","devices","container","spacing","map","pin","CircularProgress","errorIcon","inputProps","textFieldProps","TextField","data-id","fullWidth","helperText","maxLength","InputProps","endAdornment","InputAdornment","position","wrapper","buttonSuccess","backgroundColor","green","buttonProgress","schema","Yup","shape","test","name","message","URL","protocol","startsWith","required","setServerBaseUrl","noWrap","initialValues","validationSchema","onSubmit","values","setSubmitting","setStatus","setTimeout","isSubmitting","buttonClassname","clsx","buttonContent","field","meta","disabled","padding","logo","alt","src","process","link","textDecoration","disclamer","marginTop","path","exact","HomeIcon","to","sidebar","divider","DeviceHubIcon","useRouteMatch","List","Add","Edit","NotFoundPage","SettingsIcon","InfoIcon","drawer","breakpoints","up","flexShrink","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","content","navListLink","navListItemText","CustomListItem","selected","onClick","Icon","ListItem","button","ListItemIcon","ListItemText","primary","children","useTheme","location","useLocation","mobileOpen","setMobileOpen","handleDrawerToggle","headerTitle","currentRoute","routes","find","route","pathname","Divider","filter","matchPath","CssBaseline","AppBar","Toolbar","IconButton","aria-label","edge","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","basename","fallback","index","Boolean","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.79431029.chunk.js","sourcesContent":["export default function useLocalStorage(key: string, initialValue: string | null = null) {\n  if (initialValue) {\n    window.localStorage.setItem(key, initialValue)\n  }\n\n  const setValue = (value: string) => {\n    window.localStorage.setItem(key, value)\n  }\n\n  return [window.localStorage.getItem(key) as string, setValue]\n}\n","import { useState, useEffect } from 'react'\n\nimport useLocalStorage from './useLocalStorage'\n\nexport default function useFetch<T>(url: string): { data: T | null, error: Error | null, loading: boolean } {\n  const [serverBaseUrl] = useLocalStorage('serverBaseUrl')\n  const [data, setData] = useState<T | null>(null)\n  const [error, setError] = useState<Error | null>(null)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const fetchData = async (): Promise<void> => {\n      setLoading(true)\n      try {\n        const res = await fetch(`${serverBaseUrl}${url}`)\n        const data = await res.json()\n        setData(data)\n        setLoading(false)\n      } catch (err) {\n        setError(err)\n        setLoading(false)\n      }\n    }\n    fetchData()\n  }, [serverBaseUrl, url])\n\n  return { data, error, loading }\n}\n","import React from 'react'\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport ToggleOnIcon from '@material-ui/icons/ToggleOn'\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects'\n\ninterface Device {\n  pin: number\n  label: string\n  type: string\n  status?: number\n}\n\ninterface DevicesProps {\n  devices: Device[] | null\n}\n\ninterface DeviceProps {\n  device: Device\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    card: {\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n    cardActions: {\n      height: 50,\n    },\n    media: {\n      height: 140,\n      width: 140,\n      display: 'block',\n      margin: 'auto',\n    },\n    bullet: {\n      display: 'inline-block',\n      margin: '0 2px',\n      transform: 'scale(0.8)',\n    },\n  }),\n)\n\nconst Device = ({ device }: DeviceProps) => {\n  const classes = useStyles()\n\n  let icon = null\n  let iconStyles = { fontSize: 200 }\n  let actions = null\n  if (device.type === 'led') {\n    if (device.status === 1) {\n      // @ts-ignore TS2322\n      iconStyles = { ...iconStyles, fill: '#ffef62' }\n    }\n    icon = <EmojiObjectsIcon style={iconStyles} />\n    actions = (\n      <>\n        <Button size=\"small\" color=\"primary\">\n          Off\n        </Button>\n        <Typography variant=\"h5\" component=\"h2\">\n          <span className={classes.bullet}>•</span>\n        </Typography>\n        <Button size=\"small\" color=\"primary\">\n          On\n        </Button>\n      </>\n    )\n  } else if (device.type.toLowerCase().endsWith('button')) {\n    icon = <ToggleOnIcon style={{ ...iconStyles, fill: '#2a3eb1' }} />\n  }\n\n  return (\n    <Grid item lg={3} md={4} xs={6}>\n      <Card className={classes.card}>\n        <CardActionArea>\n          {icon}\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {device.label}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions className={classes.cardActions}>\n          {actions}\n        </CardActions>\n      </Card>\n    </Grid>\n  )\n}\n\nexport default ({ devices } : DevicesProps) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        {devices && devices.map(device => <Device key={device.pin} device={device} />)}\n      </Grid>\n    </div>\n  )\n}\n","import React from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport useFetch from '../../hooks/useFetch'\nimport Devices from '../../components/devices'\n\ninterface Device {\n  pin: number\n  label: string\n  type: string\n}\n\nexport default () => {\n  const { data, loading } = useFetch<Device[]>('/api/devices')\n\n  return (\n    <>\n      {loading ? <CircularProgress /> : <Devices devices={data} />}\n    </>\n  )\n}\n","import React from 'react'\n\nexport default () => {\n  return (\n    <>\n      add device\n    </>\n  )\n}\n","import React from 'react'\n\nexport default () => {\n  return (\n    <>\n      edit device\n    </>\n  )\n}\n","import React from 'react'\n\nexport default () => (\n  <>\n    not found page\n  </>\n)\n","import React from 'react'\nimport TextField, { TextFieldProps } from '@material-ui/core/TextField'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport ErrorIcon from '@material-ui/icons/ReportProblem'\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\n\ninterface CustomInputProps extends Omit<TextFieldProps, 'variant' | 'error' | 'name'> {\n  name: string,\n  className?: string,\n  error?: any\n  variant?: string,\n  maxLength?: number\n}\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  errorIcon: {\n    color: '#ff1818',\n  },\n}))\n\nexport default ({ className, error, inputProps = {}, variant = 'filled', ...textFieldProps }: CustomInputProps) => {\n  const classes = useStyles()\n\n  return (\n    <TextField\n      data-id=\"custom-input\"\n      {...textFieldProps}\n      className={className}\n      variant={variant as any}\n      fullWidth\n      margin=\"dense\"\n      error={!!error}\n      helperText={error}\n      inputProps={{\n        maxLength: inputProps.maxLength,\n      }}\n      InputProps={{\n        endAdornment: error && (\n          <InputAdornment position=\"end\">\n            <ErrorIcon className={classes.errorIcon}/>\n          </InputAdornment>\n        ),\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport CheckIcon from '@material-ui/icons/Check'\nimport { Form, FormikProps, Formik, Field, FieldProps } from 'formik'\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles'\nimport { green } from '@material-ui/core/colors'\nimport clsx from 'clsx'\nimport * as Yup from 'yup'\n\nimport TextField from '../inputs/text-field'\nimport useLocalStorage from '../../hooks/useLocalStorage'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  wrapper: {\n    margin: theme.spacing(1),\n    position: 'relative',\n  },\n  buttonSuccess: {\n    backgroundColor: green[500],\n    '&:hover': {\n      backgroundColor: green[700],\n    },\n  },\n  buttonProgress: {\n    color: green[500],\n  },\n}))\n\nconst schema = Yup.object().shape({\n  serverBaseUrl: Yup.string().test({\n    name: 'serverBaseUrl',\n    // eslint-disable-next-line no-template-curly-in-string\n    message: '${path} must be a valid URL',\n    test: (value) => {\n      try {\n        if (value) {\n          return new URL(value).protocol.startsWith('http')\n        }\n      } catch (error) {\n        // do nothing\n      }\n      return false\n    },\n  }).required('Required'),\n})\n\ninterface Values {\n  serverBaseUrl: string\n}\n\nexport default () => {\n  const classes = useStyles()\n  const [serverBaseUrl, setServerBaseUrl] = useLocalStorage('serverBaseUrl')\n\n  return (\n    <>\n      <Typography variant=\"h5\" noWrap>\n        Server Settings\n      </Typography>\n\n      <Formik\n        initialValues={{\n          serverBaseUrl: serverBaseUrl as string || '',\n        }}\n        validationSchema={schema}\n        onSubmit={(values, { setSubmitting, setStatus }) => {\n          // async simulation\n          setStatus(true)\n          setTimeout(() => {\n            // @ts-ignore TS2349\n            setServerBaseUrl(values.serverBaseUrl)\n            setSubmitting(false)\n          }, 500)\n        }}\n      >\n        {({ isSubmitting, status }: FormikProps<Values>) => {\n          const buttonClassname = clsx({\n            [classes.buttonSuccess]: status,\n          })\n\n          let buttonContent: any = 'Save'\n          if (isSubmitting) {\n            buttonContent = <CircularProgress size={24} className={classes.buttonProgress} />\n          } else if (status) {\n            buttonContent = <CheckIcon />\n          }\n\n          return(\n            <Form>\n              <Field name=\"serverBaseUrl\">\n                {({ field, meta: { error } }: FieldProps) => (\n                  <TextField\n                    label={'Server Base Url'}\n                    error={error}\n                    {...field}\n                    required\n                  />\n                )}\n              </Field>\n\n              <div className={classes.wrapper}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  type=\"submit\"\n                  className={buttonClassname}\n                  disabled={isSubmitting}\n                >\n                  {buttonContent}\n                </Button>\n              </div>\n            </Form>\n          )\n        }}\n      </Formik>\n    </>\n  )\n}\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    padding: theme.spacing(3),\n  },\n  logo: {\n    display: 'block',\n    margin: 'auto',\n  },\n  text: {\n    textAlign: 'center',\n    color: 'black',\n  },\n}))\n\nexport default () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <img alt=\"Pi Home\" className={classes.logo} src={`${process.env.PUBLIC_URL}/images/icons/icon-96x96.png`} />\n      <Typography variant=\"h5\" className={classes.text} noWrap>\n        Pi Home\n      </Typography>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport Logo from '../../components/layout/logo'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  link: {\n    textDecoration: 'none',\n  },\n  text: {\n    textAlign: 'center',\n    color: 'black',\n  },\n  disclamer: {\n    marginTop: 50,\n  },\n}))\n\nexport default () => {\n  const classes = useStyles()\n\n  return (\n    <>\n      <Logo />\n\n      <Typography variant=\"h3\" className={classes.text} noWrap>\n        Welcome!\n      </Typography>\n\n      <div className={classes.disclamer}>\n        <Typography component=\"h6\">\n          In order to get started, you need to configure the app to connect it with your server\n        </Typography>\n\n        <Link to={'/settings'} className={classes.link}>\n          <Button variant=\"outlined\" color=\"primary\">\n            Go To Settings\n          </Button>\n        </Link>\n      </div>\n    </>\n  )\n}\n","import HomeIcon from '@material-ui/icons/Home'\nimport DeviceHubIcon from '@material-ui/icons/DeviceHub'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport InfoIcon from '@material-ui/icons/Info'\n\nimport HomePage from './pages/home'\nimport DevicesPage from './pages/devices'\nimport SettingsPage from './pages/settings'\nimport AboutPage from './pages/about'\nimport WelcomePage from './pages/welcome'\nimport NotFoundPage from './pages/not-found'\n\ninterface Route {\n  path: string,\n  component: any,\n  label?: string,\n  exact?: boolean,\n  sidebar?: boolean,\n  divider?: boolean,\n  icon?: any,\n}\n\nexport default [\n  {\n    path: '/',\n    label: 'Home',\n    exact: true,\n    icon: HomeIcon,\n    component: HomePage,\n    sidebar: true,\n  },\n  {\n    path: '/devices',\n    label: 'Devices',\n    divider: true,\n    icon: DeviceHubIcon,\n    component: DevicesPage,\n    sidebar: true,\n  },\n  {\n    path: '/settings',\n    label: 'Settings',\n    exact: true,\n    icon: SettingsIcon,\n    component: SettingsPage,\n    sidebar: true,\n  },\n  {\n    path: '/about',\n    label: 'About',\n    exact: true,\n    icon: InfoIcon,\n    component: AboutPage,\n    sidebar: true,\n  },\n  {\n    path: '/welcome',\n    label: 'Welcome',\n    exact: true,\n    component: WelcomePage,\n  },\n  {\n    path: '/*',\n    component: NotFoundPage,\n  },\n] as Route[]\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport useFetch from '../../hooks/useFetch'\nimport useLocalStorage from '../../hooks/useLocalStorage'\nimport Devices from '../../components/devices'\n\ninterface Device {\n  pin: number\n  label: string\n  type: string\n}\n\nexport default () => {\n  const [serverBaseUrl] = useLocalStorage('serverBaseUrl')\n\n  if (!serverBaseUrl) {\n    return <Redirect to={'/welcome'} />\n  }\n\n  const { data, loading } = useFetch<Device[]>('/api/devices?type=led')\n\n  return (\n    <>\n      {loading ? <CircularProgress /> : <Devices devices={data} />}\n    </>\n  )\n}\n","import React from 'react'\nimport { Route, Redirect, Switch, useRouteMatch } from 'react-router-dom'\n\nimport List from './list'\nimport Add from './add'\nimport Edit from './edit'\nimport useLocalStorage from '../../hooks/useLocalStorage'\nimport NotFoundPage from '../not-found'\n\nexport default () => {\n  const { path } = useRouteMatch()\n  const [serverBaseUrl] = useLocalStorage('serverBaseUrl')\n\n  if (!serverBaseUrl) {\n    return <Redirect to={'/welcome'} />\n  }\n\n  return (\n    <>\n      <Switch>\n        <Route exact path={path} component={List} />\n        <Route exact path={`${path}/add`} component={Add} />\n        <Route exact path={`${path}/edit/:id(\\\\d+)`} component={Edit} />\n        <Route path={`${path}/*`} component={NotFoundPage} />\n      </Switch>\n    </>\n  )\n}\n","import React from 'react'\n\nimport ServerSettings from '../../components/server-settings'\n\nexport default () => {\n  return (\n    <>\n      <ServerSettings />\n    </>\n  )\n}\n","import React from 'react'\n\nexport default () => {\n  return (\n    <>\n      about page\n    </>\n  )\n}\n","import React, { ReactChild, useState } from 'react'\nimport { Link, useLocation, matchPath } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Divider from '@material-ui/core/Divider'\nimport Drawer from '@material-ui/core/Drawer'\nimport Hidden from '@material-ui/core/Hidden'\nimport IconButton from '@material-ui/core/IconButton'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport { Theme, makeStyles, useTheme, createStyles } from '@material-ui/core/styles'\n\nimport routes from '../../routes'\nimport Logo from './logo'\n\nconst drawerWidth = 240\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n    backgroundColor: '#282c34',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  navListLink: {\n    textDecoration: 'none',\n  },\n  navListItemText: {\n    color: '#000',\n  },\n}))\n\ninterface CustomListItemProps {\n  path: string,\n  icon: any\n  selected: boolean,\n  onClick: () => void,\n  label?: string,\n  divider?: boolean,\n}\n\nconst CustomListItem = ({ label, path, divider, selected, onClick, icon: Icon }: CustomListItemProps) => {\n  const classes = useStyles()\n\n  return (\n    <Link to={path} className={classes.navListLink} onClick={onClick}>\n      <ListItem divider={divider} selected={selected} button>\n        <ListItemIcon>\n          <Icon />\n        </ListItemIcon>\n        <ListItemText\n          classes={{\n            root: classes.navListItemText,\n          }}\n          primary={label}\n        />\n      </ListItem>\n    </Link>\n  )\n}\n\ninterface Props {\n  children: ReactChild\n}\n\nexport default ({ children }: Props) => {\n  const classes = useStyles()\n  const theme = useTheme()\n  const location = useLocation()\n  const [mobileOpen, setMobileOpen] = useState(false)\n\n  const handleDrawerToggle = () => setMobileOpen(!mobileOpen)\n\n  let headerTitle = 'Not Found'\n  const currentRoute = routes.find(route => {\n    if (route.path !== '/' && route.path !== '/*') {\n      return location.pathname.startsWith(route.path)\n    }\n\n    return route.path === location.pathname\n  })\n  if (currentRoute && currentRoute.label) {\n    headerTitle = currentRoute.label\n  }\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar}>\n        <Link to={'/'} className={classes.navListLink} onClick={() => setMobileOpen(false)}>\n          <Logo />\n        </Link>\n      </div>\n      <Divider />\n      <List>\n        {\n          routes.filter(route => route.sidebar).map((route) => (\n            <CustomListItem\n              key={route.path}\n              label={route.label}\n              path={route.path}\n              icon={route.icon}\n              divider={route.divider}\n              selected={!!matchPath(location.pathname, { path: route.path, exact: route.exact })}\n              onClick={() => setMobileOpen(false)}\n            />\n          ))\n        }\n      </List>\n    </div>\n  )\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            {headerTitle}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {children}\n      </main>\n    </div>\n  )\n}\n","import React, { Suspense } from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport routes from './routes'\nimport Layout from './components/layout'\n\nexport default () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Suspense fallback={<div>Loading...</div>}>\n      <Layout>\n        <Switch>\n          {routes.map((route, index) => (\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              component={route.component}\n            />\n          ))}\n        </Switch>\n      </Layout>\n    </Suspense>\n  </Router>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}